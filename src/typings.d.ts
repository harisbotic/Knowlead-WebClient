// Typings reference file, see links for more information
// https://github.com/typings/typings
// https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html

declare var System: any;
declare var module: { id: string };
declare var require: any;
declare type DataReceived = (data: any) => void;
declare type ErrorHandler = (e: any) => void;
declare type ConnectionClosed = (e?: any) => void;
declare interface SimplePeerConfiguration {
  initiator: boolean,
  channelConfig?: any,
  channelName?: string,
  config?: any,
  constraints?: any,
  offerConstraints?: any,
  answerConstraints?: any,
  reconnectTimer?: boolean,
  sdpTransform?: (sdp: any) => any,
  stream?: MediaStream,
  trickle?: boolean,
  wrtc?: any
}

declare class SimplePeer {
    constructor(configuration: SimplePeerConfiguration);
    signal(sdp: any);
    send(data: any);
    destroy(onClose?: () => void);
    static WEBRTC_SUPPORT;
    on(eventName: string, callback: (data?:any) => void);
}

/** Declaration file generated by dts-gen */

declare function recordrtc(mediaStream: any, config: any): RecordRTC;
declare namespace recordrtc {
    const Storage: {
    };
    function CanvasRecorder(htmlElement: any, config: any): any;
    function GifRecorder(mediaStream: any, config: any): any;
    function MRecordRTC(mediaStream: any): any;
    function MediaStreamRecorder(mediaStream: any, config: any): any;
    function StereoAudioRecorder(mediaStream: any, config: any): any;
    function WhammyRecorder(mediaStream: any, config: any): any;
    function getFromDisk(type: any, callback: any): void;
    function writeToDisk(options: any): void;
    namespace DiskStorage {
        const dataStoreName: string;
        const dbName: any;
        function Fetch(callback: any): any;
        function Store(config: any): any;
        function init(): void;
        function onError(error: any): void;
    }
    namespace MRecordRTC {
        function getFromDisk(type: any, callback: any): void;
        function writeToDisk(options: any): void;
    }
    namespace Whammy {
        class Video {
            constructor(duration: any);
            add(frame: any, duration: any): void;
            compile(callback: any): void;
        }
    }
}
declare class RecordRTC {
    constructor(mediaStream: any, config: any);
    blob: any;
    buffer: any;
    bufferSize: number;
    sampleRate: number;
    view: any;
    clearRecordedData(): any;
    getBlob(): any;
    getDataURL(callback: any, _mediaRecorder: any): any;
    getFromDisk(callback: any): any;
    initRecorder(initCallback: any): void;
    pauseRecording(): any;
    resumeRecording(): any;
    save(fileName: any): any;
    setAdvertisementArray(arrayOfWebPImages: any): void;
    setRecordingDuration(milliseconds: any, callback: any): any;
    startRecording(): any;
    stopRecording(callback: any): any;
    toURL(): any;
}
declare class StereoAudioRecorder {}

declare namespace DetectRTC {
    namespace screen {
        var chromeMediaSource: string;
        var sourceId: string;
        function getSourceId(callback: (data: string) => void);
        function isChromeExtensionAvailable(callback: (result: boolean) => void);
        function onMessageCallback(data: string);
    }
}
